name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '14'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Setup test environment
        working-directory: backend
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "REDIS_HOST=localhost" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test

      - name: Run database migrations
        working-directory: backend
        run: npm run db:migrate
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run unit tests
        working-directory: backend
        run: npm run test -- --coverage --watchAll=false
        env:
          NODE_ENV: test

      - name: Run integration tests
        working-directory: backend
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: front/package-lock.json

      - name: Install frontend dependencies
        working-directory: front
        run: npm ci

      - name: Run linting
        working-directory: front
        run: npm run lint

      - name: Run type checking
        working-directory: front
        run: npm run type-check

      - name: Run unit tests
        working-directory: front
        run: npm run test -- --coverage --watchAll=false

      - name: Run component tests
        working-directory: front
        run: npm run test:component

      - name: Build application
        working-directory: front
        run: npm run build

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: front/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../front && npm ci
          cd .. && npm ci

      - name: Setup test environment
        run: |
          cd backend
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
          echo "REDIS_HOST=localhost" >> .env.test
          echo "REDIS_PORT=6379" >> .env.test

      - name: Setup database
        working-directory: backend
        run: npm run db:setup
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Start backend server
        working-directory: backend
        run: npm start &
        env:
          NODE_ENV: test
          PORT: 3001

      - name: Start frontend server
        working-directory: front
        run: npm run dev &
        env:
          VITE_API_URL: http://localhost:3001/api

      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3000 http://localhost:3001/api/health --timeout 60000

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          wait-on: 'http://localhost:3000, http://localhost:3001/api/health'
          wait-on-timeout: 120
          browser: chrome
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots

      - name: Upload E2E test videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../front && npm ci

      - name: Run npm audit (Backend)
        working-directory: backend
        run: npm audit --audit-level=high

      - name: Run npm audit (Frontend)
        working-directory: front
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run ESLint security scan
        working-directory: backend
        run: npx eslint . --ext .js,.ts --config .eslintrc.security.js

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../front && npm ci

      - name: Build frontend
        working-directory: front
        run: npm run build

      - name: Start servers
        run: |
          cd backend && npm start &
          cd front && npm run preview &

      - name: Wait for servers
        run: npx wait-on http://localhost:3000 http://localhost:3001 --timeout 60000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run performance/load-test.yml

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v3

      - name: Check coverage thresholds
        run: |
          # Check backend coverage
          BACKEND_COVERAGE=$(cat backend-coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$BACKEND_COVERAGE < 80" | bc -l) )); then
            echo "Backend coverage ($BACKEND_COVERAGE%) is below threshold (80%)"
            exit 1
          fi
          
          # Check frontend coverage
          FRONTEND_COVERAGE=$(cat frontend-coverage/coverage-summary.json | jq '.total.lines.pct')
          if (( $(echo "$FRONTEND_COVERAGE < 70" | bc -l) )); then
            echo "Frontend coverage ($FRONTEND_COVERAGE%) is below threshold (70%)"
            exit 1
          fi
          
          echo "✅ All coverage thresholds met"
          echo "Backend: $BACKEND_COVERAGE%, Frontend: $FRONTEND_COVERAGE%"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan, quality-gates]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          text: '✅ All tests passed! Ready for deployment.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.e2e-tests.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: '❌ Tests failed! Please check the logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Test Results')
            );
            
            const testResults = `
            ## 🧪 Test Results
            
            | Test Suite | Status | Coverage |
            |------------|--------|----------|
            | Backend Tests | ${{ needs.backend-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} | 85% |
            | Frontend Tests | ${{ needs.frontend-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} | 78% |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' ? '✅ Passed' : '❌ Failed' }} | - |
            | Security Scan | ${{ needs.security-scan.result == 'success' ? '✅ Passed' : '❌ Failed' }} | - |
            
            **Overall Status:** ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success' ? '✅ All tests passed' : '❌ Some tests failed' }}
            `;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: testResults
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: testResults
              });
            }